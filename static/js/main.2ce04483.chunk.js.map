{"version":3,"sources":["resources/csv/RawSpawnData.csv","resources/csv/RawWaterSpawnData.csv","resources/csv/HeadbuttSpawnData.csv","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","types","regionSorting","Kanto","Johto","Hoenn","Sinnoh","Unova","Kalos","Alola","sourceData","land","water","headbutt","filteredData","repelTrickData","sortByColumns","pokedexNumber","_sortArea","min","tier","_defaultQuickList","id","name","state","filter","area","sortBy","column","direction","sorted","csv_files","require","Promise","all","map","file","resolve","reject","Papa","header","download","skipEmptyLines","complete","error","then","results","data","_dataParser","type","membersAccessible","padStart","membership","length","morning","day","night","region","parseInt","levels","match","replace","max","repelId","hasOwnProperty","_this2","fname","toLowerCase","farea","forEach","entry","pokemon","indexOf","sort","_this3","_","reverse","setState","location","areaRepelData","prominent_group_count","Math","apply","toConsumableArray","values","prominent_group_max_level_index","prominent_group_max_level","keys","e","preventDefault","alternateDirection","rarity","console","Error","quickListData","localStorage","getItem","JSON","parse","a","b","setItem","stringify","forceUpdate","inQuickList","getQuickList","push","saveQuickList","remove","undefined","find","_this4","react_default","createElement","Segment","List","horizontal","index","Item","key","Button","className","onClick","setFilter","concat","_this5","icon_morning","src","alt","title","icon_day","icon_night","icon_rod","icons_rod","Old","Good","Super","_this$state$sortBy","Container","Input","value","onChange","target","icon","link","placeholder","Table","compact","basic","sortable","Header","Row","HeaderCell","Fragment","textAlign","Body","repelTrickPossible","Cell","href","Icon","removeFromQuickList","aria-hidden","addToQuickList","rod","getTierClassName","heldItem","renderQuickList","Component","Boolean","window","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ce04483.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/RawSpawnData.139a7916.csv\";","module.exports = __webpack_public_path__ + \"static/media/RawWaterSpawnData.ce1ee5a1.csv\";","module.exports = __webpack_public_path__ + \"static/media/HeadbuttSpawnData.5e104bfc.csv\";","import React, {Component} from 'react';\nimport * as Papa from 'papaparse';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\nimport './resources/pokdex_sprites.css';\nimport {Button, Container, Icon, Input, List, Segment, Table} from \"semantic-ui-react\";\nimport _ from 'lodash';\n\nclass App extends Component {\n\n    types = ['land', 'water', 'headbutt'];\n    regionSorting = {\n        Kanto: 1,\n        Johto: 2,\n        Hoenn: 3,\n        Sinnoh: 4,\n        Unova: 5,\n        Kalos: 6,\n        Alola: 7,\n    };\n\n    sourceData = {\n        land: [],\n        water: [],\n        headbutt: [],\n    };\n\n    filteredData = {\n        land: [],\n        water: [],\n        headbutt: [],\n    };\n\n    repelTrickData = {};\n\n    sortByColumns = {\n        pokedexNumber: ['pokedexNumber', '_sortArea', 'location'],\n        _sortArea: ['_sortArea', 'tier', 'pokedexNumber', 'location'],\n        min: ['min', '_sortArea', 'location'],\n        tier: ['tier', '_sortArea', 'pokedexNumber', 'location'],\n    };\n\n    constructor() {\n        super();\n\n        // JSON.parse(localStorage.getItem('playerData'));\n        // localStorage.setItem('playerData', JSON.stringify(save));\n\n        this.state = {\n            filter: {\n                name: '',\n                area: ''\n            },\n            sortBy: {\n                column: '_sortArea',\n                direction: 'ascending'\n            },\n            sorted: {\n                land: [],\n                water: [],\n                headbutt: [],\n            }\n        };\n\n        const csv_files = [\n            require('./resources/csv/RawSpawnData.csv'),\n            require('./resources/csv/RawWaterSpawnData.csv'),\n            require('./resources/csv/HeadbuttSpawnData.csv'),\n        ];\n\n        Promise.all(csv_files.map(file => new Promise((resolve, reject) => {\n            Papa.parse(file, {\n                header: true,\n                download: true,\n                skipEmptyLines: true,\n                complete: resolve,\n                error: reject\n            });\n        }))).then(results => {\n\n            this.sourceData = {\n                land: results[0].data.map((data) => this._dataParser(data, 'land')),\n                water: results[1].data.map((data) => this._dataParser(data, 'water')),\n                headbutt: results[2].data.map((data) => this._dataParser(data, 'headbutt')),\n            };\n\n            this.filter();\n\n        });\n    }\n\n    _dataParser(data, type) {\n        delete data.membersAccessible;\n        data.pokedexNumber = data.pokedexNumber.padStart(3, '0');\n        data.membership = data.membership.length > 0;\n        data.morning = !!data.morning;\n        data.day = !!data.day;\n        data.night = !!data.night;\n        data._sortArea = this.regionSorting[data.region] + ' - ' + data.region + ' - ' + data.area;\n        data.min = parseInt(!!data.levels.match(/^(\\d+)-(\\d+)$/) ? data.levels.replace(/^(\\d+)-(\\d+)$/, '$1') : data.levels, 10);\n        data.max = parseInt(!!data.levels.match(/^(\\d+)-(\\d+)$/) ? data.levels.replace(/^(\\d+)-(\\d+)$/, '$2') : data.levels, 10);\n\n        let repelId = type + ' - ' + data.region + ' - ' + data.area;\n\n        if (!this.repelTrickData.hasOwnProperty(repelId)) {\n            this.repelTrickData[repelId] = {};\n        }\n        if (!this.repelTrickData[repelId].hasOwnProperty(data.max)) {\n            this.repelTrickData[repelId][data.max] = 0;\n        }\n        this.repelTrickData[repelId][data.max]++;\n\n        return data;\n    }\n\n    filter() {\n        const fname = this.state.filter.name.toLowerCase();\n        const farea = this.state.filter.area;\n        this.types.forEach(type => {\n            this.filteredData[type] = this.sourceData[type].filter(entry => {\n                return (fname.length > 2 && entry.pokemon.toLowerCase().indexOf(fname) > -1)\n                    || (farea.length > 0 && entry.area === farea)\n            });\n        });\n        this.sort();\n    }\n\n    sort() {\n        const sorted = {};\n        this.types.forEach(type => {\n            if (this.state.sortBy.column) {\n                sorted[type] = _.sortBy(this.filteredData[type], this.sortByColumns[this.state.sortBy.column]);\n                if (this.state.sortBy.direction === 'descending') {\n                    sorted['type'] = sorted[type].reverse();\n                }\n            } else {\n                sorted[type] = this.filteredData[type];\n            }\n        });\n        this.setState({sorted: sorted});\n    }\n\n    repelTrickPossible(type, data) {\n        if (data.hasOwnProperty('location') && data.location === 'Fishing') return false;\n        let repelId = type + ' - ' + data.region + ' - ' + data.area;\n        if (!this.repelTrickData.hasOwnProperty(repelId)) return false;\n\n        const areaRepelData = this.repelTrickData[repelId];\n\n        const prominent_group_count = Math.max(...Object.values(areaRepelData));\n        const prominent_group_max_level_index = Object.values(areaRepelData).indexOf(prominent_group_count);\n        const prominent_group_max_level = Object.keys(areaRepelData)[prominent_group_max_level_index];\n\n        return data.min > prominent_group_max_level;\n    }\n\n    setFilter(filter, e) {\n        if (e) e.preventDefault();\n        if (!filter.hasOwnProperty('name')) filter.name = this.state.filter.name;\n        if (!filter.hasOwnProperty('area')) filter.area = this.state.filter.area;\n        this.state.filter = filter;\n        this.filter();\n    }\n\n    alternateDirection(direction) {\n        return direction === 'ascending' ? 'descending' : 'ascending';\n    }\n\n    sortBy(column) {\n        this.state.sortBy = {\n            column: column,\n            direction: this.state.sortBy.column === column ? this.alternateDirection(this.state.sortBy.direction) : 'ascending'\n        };\n        this.filter();\n    }\n\n    getTierClassName(rarity) {\n        switch (rarity) {\n            case \"1\":\n            case \"Common\":\n                return 'green';\n            case \"2\":\n            case \"3\":\n                return 'olive';\n            case \"4\":\n            case \"5\":\n            case \"Intermediate\":\n                return 'yellow';\n            case \"6\":\n            case \"7\":\n            case \"Rare\":\n                return 'orange';\n            case \"8\":\n            case \"9\":\n                return 'red';\n            default:\n                console.error(rarity);\n                throw new Error('rarity not found');\n        }\n    }\n\n    _defaultQuickList = [\n        {\n            id: \"133\",\n            name: \"Eevee\"\n        },\n        {\n            id: \"147\",\n            name: \"Dratini\"\n        },\n        {\n            id: \"175\",\n            name: \"Togepi\"\n        },\n        {\n            id: \"246\",\n            name: \"Larvitar\"\n        },\n        {\n            id: \"280\",\n            name: \"Ralts\"\n        },\n        {\n            id: \"371\",\n            name: \"Bagon\"\n        },\n        {\n            id: \"443\",\n            name: \"Gible\"\n        },\n        {\n            id: \"446\",\n            name: \"Munchlax\"\n        },\n        {\n            id: \"532\",\n            name: \"Timburr\"\n        },\n        {\n            id: \"633\",\n            name: \"Deino\"\n        }\n    ];\n\n    getQuickList() {\n        const quickListData = localStorage.getItem('proSpawnQuickList');\n        if (quickListData === null) return this._defaultQuickList;\n        return JSON.parse(quickListData);\n    }\n\n    saveQuickList(quickListData) {\n        quickListData = quickListData.sort((a, b) => {\n            if (a.id === b.id) return 0;\n            return a.id > b.id ? 1 : -1;\n        });\n        localStorage.setItem('proSpawnQuickList', JSON.stringify(quickListData));\n        this.forceUpdate();\n    }\n\n    addToQuickList(id, name) {\n        if (!this.inQuickList(id)) {\n            const quickListData = this.getQuickList();\n            quickListData.push({id: id, name: name});\n            this.saveQuickList(quickListData)\n        }\n    }\n\n    removeFromQuickList(id) {\n        const quickListData = this.getQuickList();\n        _.remove(quickListData, {id: id});\n        this.saveQuickList(quickListData);\n    }\n\n    inQuickList(id) {\n        return _.find(this.getQuickList(), {id: id}) !== undefined;\n    }\n\n    renderQuickList() {\n        const quickListData = this.getQuickList();\n        return (\n            !quickListData ? null :\n            <Segment>\n                <List horizontal >\n                    {quickListData.map((entry, index) => (\n                        <List.Item key={index}>\n                            <Button className='btn-lnk' onClick={() => this.setFilter({name: entry.name})}>\n                                <i className={`pokedex-sprite pokedex-sprite-${entry.id}`}/>\n                                {entry.name}\n                            </Button>\n                        </List.Item>))}\n                </List>\n            </Segment>\n        );\n    }\n\n    render() {\n        const icon_morning = <img src=\"https://img.pokemondb.net/images/locations/morning.png\" alt=\"Morning\" title=\"Morning\"/>;\n        const icon_day = <img src=\"https://img.pokemondb.net/images/locations/day.png\" alt=\"Day\" title=\"Day\"/>;\n        const icon_night = <img src=\"https://img.pokemondb.net/images/locations/night.png\" alt=\"Night\" title=\"Night\"/>;\n\n        const icon_rod = <img src=\"https://img.pokemondb.net/sprites/items/fishing-rod.png\" alt=\"Fishing Rod\"/>;\n\n        const icons_rod = {\n            Old: <img src=\"https://img.pokemondb.net/sprites/items/old-rod.png\" alt=\"Old Rod\" title=\"Old Rod\"/>,\n            Good: <img src=\"https://img.pokemondb.net/sprites/items/good-rod.png\" alt=\"Good Rod\" title=\"Good Rod\"/>,\n            Super: <img src=\"https://img.pokemondb.net/sprites/items/super-rod.png\" alt=\"Super Rod\" title=\"Super Rod\"/>,\n        };\n\n        const {column, direction} = this.state.sortBy;\n\n        return (\n            <Container>\n                <Segment>\n                    <Input\n                        value={this.state.filter.name}\n                        onChange={(e) => this.setFilter({name: e.target.value})}\n                        icon={{ name: 'close', link: true, onClick: () => this.setFilter({name: ''})}}\n                        placeholder='pokemon name...'\n                    />\n\n                    &nbsp;\n                    &nbsp;\n\n                    <Input\n                        value={this.state.filter.area}\n                        onChange={(e) => this.setFilter({area: e.target.value})}\n                        icon={{ name: 'close', link: true, onClick: () => this.setFilter({area: ''})}}\n                        placeholder='area...'\n                    />\n                </Segment>\n\n                {this.types.map(type => {\n                    const data = this.state.sorted[type];\n                    return (\n                        <Table key={type} compact='very' basic className={type} sortable>\n                            <Table.Header>\n                                <Table.Row>\n                                    <Table.HeaderCell sorted={column === '_sortArea' ? direction : null} onClick={() => this.sortBy('_sortArea')}>\n                                        Region - Area\n                                    </Table.HeaderCell>\n                                    <Table.HeaderCell sorted={column === 'pokedexNumber' ? direction : null} onClick={() => this.sortBy('pokedexNumber')}>\n                                        ID\n                                    </Table.HeaderCell>\n                                    <Table.HeaderCell>Pokemon</Table.HeaderCell>\n                                    {type !== 'headbutt' ? (\n                                            <React.Fragment>\n                                                <Table.HeaderCell>M</Table.HeaderCell>\n                                                <Table.HeaderCell>D</Table.HeaderCell>\n                                                <Table.HeaderCell>N</Table.HeaderCell>\n                                            </React.Fragment>\n                                        )\n                                        : null}\n                                    {type === 'water'\n                                        ? <Table.HeaderCell>{icon_rod}</Table.HeaderCell>\n                                        : null}\n                                    <Table.HeaderCell sorted={column === 'tier' ? direction : null} onClick={() => this.sortBy('tier')}>\n                                        Tier\n                                    </Table.HeaderCell>\n                                    <Table.HeaderCell>MS?</Table.HeaderCell>\n                                    <Table.HeaderCell textAlign='right' sorted={column === 'min' ? direction : null} onClick={() => this.sortBy('min')}>\n                                        Levels\n                                    </Table.HeaderCell>\n                                    {type !== 'headbutt' ? (\n                                        <Table.HeaderCell>Repel</Table.HeaderCell>\n                                    ) : null}\n                                    <Table.HeaderCell>Item</Table.HeaderCell>\n                                </Table.Row>\n                            </Table.Header>\n                            <Table.Body>\n                                {data.map(entry => {\n                                    let repelTrickPossible = this.repelTrickPossible(type, entry);\n                                    return (\n                                        <Table.Row key={JSON.stringify(entry)}>\n                                            <Table.Cell><a href=\"#\" onClick={(e) => this.setFilter({name: '', area: entry.area}, e)}>{entry.region} - {entry.area}</a></Table.Cell>\n                                            <Table.Cell>{entry.pokedexNumber}</Table.Cell>\n                                            <Table.Cell>\n                                                <i className={`pokedex-sprite pokedex-sprite-${entry.pokedexNumber}`}/>\n                                                <Button className='btn-lnk' onClick={(e) => this.setFilter({name: entry.pokemon, area: ''}, e)}>{entry.pokemon}</Button>\n                                                &nbsp;\n                                                <a href={`https://pokemondb.net/pokedex/${entry.pokedexNumber}`} target='_blank'>\n                                                    <Icon name='external alternate'/>\n                                                </a>\n                                                &nbsp;\n                                                {this.inQuickList(entry.pokedexNumber)\n                                                    ? (\n\n                                                        <Button className='btn-lnk' onClick={() => this.removeFromQuickList(entry.pokedexNumber)}>\n                                                            <i aria-hidden=\"true\" className=\"bookmark green icon\"/>\n                                                        </Button>\n                                                    ) : (\n                                                        <Button className='btn-lnk' onClick={() => this.addToQuickList(entry.pokedexNumber, entry.pokemon)}>\n                                                            <i aria-hidden=\"true\" className=\"bookmark grey icon\"/>\n                                                        </Button>\n                                                    )\n                                                }\n                                            </Table.Cell>\n                                            {type !== 'headbutt' ? (\n                                                    <React.Fragment>\n                                                        <Table.Cell className={entry.morning ? 'yellow' : ''}>{entry.morning ? icon_morning : null}</Table.Cell>\n                                                        <Table.Cell className={entry.day ? 'blue' : ''}>{entry.day ? icon_day : null}</Table.Cell>\n                                                        <Table.Cell className={entry.night ? 'grey' : ''}>{entry.night ? icon_night : null}</Table.Cell>\n                                                    </React.Fragment>\n                                                )\n                                                : null}\n                                            {type === 'water'\n                                                ? <Table.Cell>{entry.rod ? icons_rod[entry.rod] : null}</Table.Cell>\n                                                : null}\n                                            <Table.Cell className={this.getTierClassName(entry.tier)} textAlign='center'>{entry.tier}</Table.Cell>\n                                            <Table.Cell textAlign='center' className={entry.membership ? 'violet' : ''}>{entry.membership ?\n                                                <i className='ui icon dollar sign white'/> : null}</Table.Cell>\n                                            <Table.Cell textAlign='right'>{entry.levels}</Table.Cell>\n                                            {type !== 'headbutt' ? (\n                                                <Table.Cell textAlign='center' className={repelTrickPossible ? 'teal' : ''}>{repelTrickPossible ? 'Yes' : null}</Table.Cell>\n                                            ) : null}\n                                            <Table.Cell>{entry.heldItem}</Table.Cell>\n                                        </Table.Row>\n                                    );\n                                })}\n                            </Table.Body>\n                        </Table>\n                    );\n                })}\n\n                {this.renderQuickList()}\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}